#!/bin/bash
set -e
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
WD=$(pwd)

. appmancore


function main() {

    case $1 in 
        init)
            initAppmanProject
            ;;
        *)
            showAllConnectedDevices
            ;;
    esac

    exit 1
}

function loadConfig() {
    if [ -f $WD/appmanconfig ]; then
        . $WD/appmanconfig
    else
        echo Cannot read file appmanconfig
    fi
}

function initAppmanProject() {
    mkdir -p devices
    cp $SDIR/appmanconfig $WD/.
    cp $SDIR/nodeconfig-template $WD/.
}

function showAllConnectedDevices() {
    loadConfig
    checkAdbServer
    checkDevicesFolder
    updateConnectedDevicesList

    IFS=$'\n'
    for deviceId in `getConnectedDevices`
    do
        processDevice ${deviceId}
    done
}

function processDevice() {
    deviceId=$1
    deviceFile=```getDeviceFile ${deviceId}```

    if [[ -e "${deviceFile}" ]]; then
        processExistentDevice ${deviceId}
    else
        processNewDevice ${deviceId}
    fi
}

function processExistentDevice() {
    deviceId=$1

    status=`checkDeviceStatus $deviceId`

    if [[ $status == "off" ]]; then
        echo Starting device $deviceId
        startDeviceNode $deviceId
    else 
        echo Device $deviceId status is: $status
    fi
}

function processNewDevice() {
    deviceId=$1
    printf "\n\n"

    confirmCall "configureNewDevice $deviceId" \
        "New device ${deviceId} is connected. Would you like to configure it?"
}



function configureNewDevice() {
    deviceId=$1

    _jsonAppiumPort=`findFreePort`
    echo "Found open port: ${_jsonAppiumPort}"

    readVar "browserName"  _jsonBrowserName "${__appmanDefault_browserName}"
    readVar "Android version" _jsonVersion "${__appmanDefault_version}"
    readVar "Appium server host" _jsonAppiumHost "${__appmanDefault_apppiumHost}"
    readVar "Hub host" _jsonHubHost "${__appmanDefault_hubHost}"
    readVar "Hub port" _jsonHubPort "${__appmanDefault_hubPort}"

    nodeconfigFile=`getDeviceNodeconfigFile $deviceId`

    cat $WD/nodeconfig-template | sed \
        -e "s/\${browserName}/${_jsonBrowserName}/g" \
        -e "s/\${version}/${_jsonVersion}/g" \
        -e "s/\${appiumHost}/${_jsonAppiumHost}/g" \
        -e "s/\${appiumPort}/${_jsonAppiumPort}/g" \
        -e "s/\${hubHost}/${_jsonHubHost}/g" \
        -e "s/\${hubPort}/${_jsonHubPort}/g" \
    > $nodeconfigFile

    deviceFileName=`getDeviceFile $deviceId`
    touch $deviceFileName
    echo "$_jsonAppiumHost $_jsonAppiumPort" > $deviceFileName

    echo "Device ${deviceId} is configured"

    confirmCall "startDeviceNode $deviceId" \
        "Would you like to start the newly configured device?"
}


main $*
