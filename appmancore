#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
WD=$(pwd)

function die() {
    >&2 echo ERROR: $*
    exit 1
}


function checkAdbServer() {
    set +e
    proc=`ps -ef | grep adb | grep -v grep`
    if [[ -z "$proc" ]]; then
        die "Android debug bridge server is not running. Use command: adb start-server"
    fi
    set -e
}

function checkDevicesFolder() {
    if [ ! -d $__appmanDevicesFolder ]; then
        mkdir $__appmanDevicesFolder
        echo "Created folder $__appmanDevicesFolder"
    fi
}

function confirmCall() {
    call=$1
    question=$2

    read -r -p "$question [y/N] " response
    case $response in 
        [yY][eE][sS]|[yY]) 
            eval $call
            ;;
    esac
}


function getConnectedDevices() {
    cat ${__appmanDevicesFolder}/${__appmanConnectedDevicesFile}
}

function getDeviceFile() {
    echo "${__appmanDevicesFolder}/device-$1.device"
}

function getDeviceNodeconfigFile() {
    echo ${__appmanDevicesFolder}/device-$1-nodeconfig.json
}


function updateConnectedDevicesList() {
    adb devices | tail -n +2 | awk '{print $1}' | sed '/^$/d' > ${__appmanDevicesFolder}/${__appmanConnectedDevicesFile}
}


function readVar() {
    printf "$1"
    if [[ -n $3 ]]; then
        printf " [$3]: "
    else
        printf ": "
    fi
    read input

    if [[ -n $3 && -z $input ]]; then
        input=$3
    fi

    eval "$2=\$input"
}

function findFreePort() {
    #TODO should also check if the port is not defined in device files

    portEnd=$((__appmanPortLookupStart+__appmanPortLookupLimit))
    foundOpenPort=0

    for port in $(seq ${__appmanPortLookupStart} ${portEnd})
    do
        # checking if there are any processes listening on the port
        processUsingPort=`lsof -i:$port`
        if [[ -z ${processUsingPort} ]]; then
            foundOpenPort=${port}
            break
        fi
    done

    if [[ ${foundOpenPort} -gt 0 ]]; then
        echo ${foundOpenPort}
    else 
        die "Failed find open port in range ${__appmanPortLookupStart}..${portEnd}"
    fi
}

function checkDeviceStatus() {
    deviceId=$1
    
    deviceFile=`getDeviceFile $deviceId`

    pid=`cat $deviceFile | awk '{print $3}'`
    if [ -z "$pid" ]; then
        echo "off"
    else 
        if [ -z `ps -p $pid | grep $pid` ]; then
            echo "off"
        else 
            echo "running"
        fi
    fi
}


function startDeviceNode() {
    deviceId=$1
    deviceFile=`getDeviceFile $deviceId`

    echo "Starting appium node for $deviceId"

    appiumHost=`cat $deviceFile | awk '{print $1}'`
    appiumPort=`cat $deviceFile | awk '{print $2}'`

    if [[ -z "$appiumHost" || -z "$appiumPort" ]]; then
        die "file $deviceFile is corrupted"
    fi

    nohup appium  -a "$appiumHost" -p "$appiumPort" -U "$deviceId"  &
    devicePID=$!

    echo "$appiumHost $appiumPort $devicePID" > $deviceFile

}



